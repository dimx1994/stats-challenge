[flake8]
max-line-length = 120
max-complexity = 20
show-source = true
exclude =
    data
    __init__.py
enable-extensions = G

ignore =
    E203 ; whitespace before ':'
    E231 ; whitespace before ':'
    C901 ; 'NumeralNormalizer.normalize_numbers_by_tokens' is too complex (21)
    W503 ; line break before binary operator
    A003 ; XXX is a python builtin, consider renaming the class attribute
    A001 ; "id" is a python builtin and is being shadowed, consider renaming the variable
    N805 ; first argument of a method should be named 'self'
    PT004 ; fixture does not return anything, add leading underscore
    PT011 ; set the match parameter in pytest.raises(ValueError)
    PT012 ; pytest.raises() block should contain a single simple statement
    PT019 ; fixture ... without value is injected as parameter, use @pytest.mark.usefixtures instead
    D100 ; Missing docstring in public module
    D101 ; Missing docstring in public class
    D102 ; Missing docstring in public method
    D103 ; Missing docstring in public function
    D104 ; Missing docstring in public package
    D105 ; Missing docstring in magic method
    D106 ; Missing docstring in public nested class
    D107 ; Missing docstring in __init__
    D205 ; 1  blank line required between summary line and description
    D210 ; No whitespaces allowed surrounding docstring text
    D401 ; First line should be in imperative mood; try rephrasing
    C408 ; Unnecessary dict call - rewrite as a literal
    PT018 ; assertion should be broken down into multiple parts
    PT019 ; fixture <FIXTURE> without value is injected as parameter
    F821 ;
    PT006 ; wrong name(s) type in @pytest.mark.parametrize, expected tuple
    PT007 ; wrong values type in @pytest.mark.parametrize, expected list of tuples
    IF100 ; don`t use "[on_true] if [expression] else [on_false]" syntax
    PT014 ; found duplicate test cases (5, 8) in @pytest.mark.parametrize
    G200 ; Logging statement uses exception in arguments
    R504 ; you shouldn`t assign value to variable if it will be use only as return value

per-file-ignores =
    factory.py:E800

[isort]
multi_line_output=3
include_trailing_comma = True
force_grid_wrap = 0
use_parentheses = True
ensure_newline_before_comments = True
line_length = 88
balanced_wrapping = true
default_section = THIRDPARTY
known_first_party = src,tests,scripts,cli
skip = data, __init__.py

[pylint]
good-names=i,j,k,e,x,y,m,_,es
max-module-lines=300
max-line-length=120
output-format = colorized
generated-members=pydantic
ignored-classes=scoped_session,SQLAlchemy,sessionmaker
extension-pkg-whitelist=lru,pydantic.error_wrappers,pydantic.dataclasses
signature-mutators=pytest.fixture
enable=use-symbolic-message-instead,R

disable=
    C0103, ; Constant name "logger" doesn't conform to UPPER_CASE naming style (invalid-name)
    C0111, ; Missing module docstring (missing-docstring)
    E0213, ; Method should have "self" as first argument (no-self-argument) - N805 for flake8
    R0201, ; Method could be a function (no-self-use)
    R0903, ; Too few public methods (m/n) (too-few-public-methods)
    W0511, ; Fixme
    C0330, ; Wrong hanging indentation before block (add 4 spaces)
    W0621, ; (redefined-outer-name)
    W1202, ; Use percent formatting in logging functions and pass the percent parameters as arguments
    W0703, ; Catching too general exception Exception
    E0611, ; No name in module
    R0913, ; Too many arguments
    R1702, ; Too many nested blocks (8/5) (too-many-nested-blocks)
    R0912, ; Too many branches
    R0915, ; Too many statements
    C0302, ; Too many lines in module
    R0902, ; Too many instance attributes
    C0415, ; Import outside toplevel
    W0707, ; Consider explicitly re-raising using the 'from' keyword (raise-missing-from)

    duplicate-code, ; unfortunately, min-similarity-lines doesn`t work

ignore=
    data
ignore-patterns=
